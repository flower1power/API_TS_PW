import { Bot } from 'grammy';
import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';

dotenv.config();

function pad(n: number): string {
  return n < 10 ? `0${n}` : String(n);
}

function fmtDate(ms: number): string {
  const d = new Date(ms);
  const h = pad(d.getHours());
  const m = pad(d.getMinutes());
  const s = pad(d.getSeconds());
  const month = pad(d.getMonth() + 1);
  const year = d.getFullYear();
  const day = pad(d.getDate());

  return `${h}:${m}:${s} ${day}.${month}.${year}`;
}

function fmtDur(ms: number): string {
  const s = Math.floor(ms / 1000);
  const h = Math.floor(s / 3600);
  const m = Math.floor((s % 3600) / 60);
  const sec = s % 60;

  return `${h}:${pad(m)}:${pad(sec)}`;
}

function percent(n: number, total: number): string {
  return total ? ((n / total) * 100).toFixed(2) : '0.00';
}

export async function sendTelegramReport(): Promise<void> {
  const token = process.env.TELEGRAM_BOT_ACCESS_TOKEN;
  const chatId = process.env.TELEGRAM_BOT_CHAT_ID;

  console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('- DEPLOYMENT_STATUS:', process.env.DEPLOYMENT_STATUS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- REPORT_ENV:', process.env.REPORT_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- PROJECT:', process.env.PROJECT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- WORKERS:', process.env.WORKERS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('- GITHUB_ACTOR:', process.env.GITHUB_ACTOR || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

  if (!token || !chatId) {
    console.error('‚ùå TELEGRAM_BOT_ACCESS_TOKEN –∏–ª–∏ TELEGRAM_BOT_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    return;
  }

  const bot = new Bot(token);
  const root = path.resolve(__dirname, '../..');
  const summaryPath = path.join(root, 'allure-report', 'widgets', 'summary.json');

  let data: any;

  try {
    data = JSON.parse(fs.readFileSync(summaryPath, 'utf-8'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è summary.json:', error);
    await bot.api.sendMessage(
      chatId,
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Allure summary.json\n' +
        `–í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∏–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è.\n\n` +
        (process.env.WORKFLOW_URL ? `üîó Workflow: ${process.env.WORKFLOW_URL}` : ''),
    );
    return;
  }

  const st = data.statistic || {};
  const time = data.time || {};
  const total = st.total ?? st.passed + st.failed + st.skipped + st.broken + st.unknown;
  const failedAll = (st.failed || 0) + (st.broken || 0);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
  const status = process.env.DEPLOYMENT_STATUS || 'completed';
  const statusEmoji = status === 'success' ? '‚úÖ' : status === 'failed' ? '‚ùå' : '‚úÖ';
  const isSuccess = failedAll === 0 && total > 0;

  const lines = [
    `${statusEmoji} ========== Test Report ==========`,
    '',
    'üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**',
    `üéÆ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`,
    `${isSuccess ? '‚úÖ' : '‚ùå'} Passed: ${st.passed || 0} (${percent(st.passed || 0, total)}%)`,
    `${failedAll > 0 ? 'üî¥' : '‚ö™'} Failed: ${failedAll} (${percent(failedAll, total)}%)`,
    `‚è≠Ô∏è Skipped: ${st.skipped || 0} (${percent(st.skipped || 0, total)}%)`,
    '',
    '‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**',
    `üìÖ –ù–∞—á–∞–ª–æ: ${fmtDate(time.start)}`,
    `üìÖ –ö–æ–Ω–µ—Ü: ${fmtDate(time.stop)}`,
    `‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${fmtDur((time.stop || 0) - (time.start || 0))}`,
    '',
    'üîß **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**',
  ];

  if (process.env.REPORT_ENV) lines.push(`‚ñ™Ô∏è Environment: ${process.env.REPORT_ENV}`);
  if (process.env.PROJECT) lines.push(`‚ñ™Ô∏è Project: ${process.env.PROJECT}`);
  if (process.env.WORKERS) lines.push(`‚ñ™Ô∏è Workers: ${process.env.WORKERS}`);
  if (process.env.GITHUB_ACTOR) lines.push(`‚ñ™Ô∏è –ó–∞–ø—É—Å—Ç–∏–ª: @${process.env.GITHUB_ACTOR}`);

  lines.push('', 'üîó **–°—Å—ã–ª–∫–∏:**');
  if (process.env.REPORT_URL) lines.push(`üìä –û—Ç—á–µ—Ç: ${process.env.REPORT_URL}`);
  if (process.env.WORKFLOW_URL) lines.push(`üîÑ Workflow: ${process.env.WORKFLOW_URL}`);

  lines.push('');
  if (status === 'success' || status === 'failed') {
    lines.push(`${statusEmoji} –°—Ç–∞—Ç—É—Å: ${status.toUpperCase()}`);
  }

  const stickerOk = 'CAACAgIAAxkBAAEHLwhuj9603ykDs1koRNLhtXScXBl-ygACNwADxrpkA4PqaByeU1kyLQQ';
  const stickerFail = 'CAACAgIAAxkBAAEHLwzju96jPuGKRaneTpNOu-Rh0jtiAACMgADxrpkA-VxdzgJnnpLQQ';

  try {
    await bot.api.sendSticker(chatId, isSuccess ? stickerOk : stickerFail);
    await bot.api.sendMessage(chatId, lines.join('\n'), { parse_mode: 'Markdown' });
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    throw error;
  }
}

if (require.main === module) {
  void sendTelegramReport();
}
