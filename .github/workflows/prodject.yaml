name: Docker Tests

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - parallel
        - smoke
        - regression

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'smoke' }}
    timeout-minutes: 30
    env:
      TELEGRAM_BOT_CHAT_ID: ${{ secrets.TELEGRAM_BOT_CHAT_ID }}
      TELEGRAM_BOT_ACCESS_TOKEN: ${{ secrets.TELEGRAM_BOT_ACCESS_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Ensure Docker Compose v2 (plugin) is available
      uses: docker/setup-compose-action@v1

    - name: Build Docker image
      run: docker compose build smoke-tests

    - name: Run Smoke tests
      run: |
        PROJECT=smoke WORKERS=4 docker compose up smoke-tests
      continue-on-error: true

    - name: Archive smoke test results
      uses: actions/upload-artifact@v4
      with:
        name: smoke-allure-results
        path: allure-results
        retention-days: 1
        if-no-files-found: ignore

  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'regression' }}
    timeout-minutes: 60
    env:
      TELEGRAM_BOT_CHAT_ID: ${{ secrets.TELEGRAM_BOT_CHAT_ID }}
      TELEGRAM_BOT_ACCESS_TOKEN: ${{ secrets.TELEGRAM_BOT_ACCESS_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Ensure Docker Compose v2 (plugin) is available
      uses: docker/setup-compose-action@v1

    - name: Build Docker image
      run: docker compose build regression-tests

    - name: Run Regression tests
      run: |
        PROJECT=regression WORKERS=4 docker compose up regression-tests
      continue-on-error: true

    - name: Archive regression test results
      uses: actions/upload-artifact@v4
      with:
        name: regression-allure-results
        path: allure-results
        retention-days: 1
        if-no-files-found: ignore

  parallel-tests:
    name: Parallel Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'parallel' }}
    timeout-minutes: 120
    env:
      TELEGRAM_BOT_CHAT_ID: ${{ secrets.TELEGRAM_BOT_CHAT_ID }}
      TELEGRAM_BOT_ACCESS_TOKEN: ${{ secrets.TELEGRAM_BOT_ACCESS_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Ensure Docker Compose v2 (plugin) is available
      uses: docker/setup-compose-action@v1

    - name: Build Docker images
      run: docker compose build

    - name: Run all tests in parallel
      run: docker compose up
      continue-on-error: true

    - name: Archive test results
      uses: actions/upload-artifact@v4
      with:
        name: parallel-allure-results
        path: allure-results
        retention-days: 1
        if-no-files-found: ignore

  generate-report:
    runs-on: ubuntu-latest
    needs: [ smoke-tests, regression-tests, parallel-tests ]
    # –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –Ω—É–∂–Ω—ã—Ö job'–æ–≤ –≤–µ—Ä–Ω—É–ª success
    if: ${{ needs.smoke-tests.result == 'success' || needs.regression-tests.result == 'success' || needs.parallel-tests.result == 'success' }}
    name: Generate Allure Report
    env:
      TELEGRAM_BOT_CHAT_ID: ${{ secrets.TELEGRAM_BOT_CHAT_ID }}
      TELEGRAM_BOT_ACCESS_TOKEN: ${{ secrets.TELEGRAM_BOT_ACCESS_TOKEN }}
    steps:
    - uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '17'

    - name: Install Allure CLI
      run: |
        wget -q https://github.com/allure-framework/allure2/releases/download/2.35.1/allure-2.35.1.tgz
        sudo tar -xzf allure-2.35.1.tgz -C /opt/
        sudo ln -sf /opt/allure-2.35.1/bin/allure /usr/bin/allure

    - name: Download smoke test results
      uses: actions/download-artifact@v4
      with:
        name: smoke-allure-results
        path: smoke-results
        if-no-files-found: ignore

    - name: Download regression test results
      uses: actions/download-artifact@v4
      with:
        name: regression-allure-results
        path: regression-results
        if-no-files-found: ignore

    - name: Download parallel test results
      uses: actions/download-artifact@v4
      with:
        name: parallel-allure-results
        path: parallel-results
        if-no-files-found: ignore

    - name: Merge test results
      run: |
        mkdir -p allure-results
        find smoke-results regression-results parallel-results -name "*.json" -exec cp {} allure-results/ \; 2>/dev/null || true

    - name: Validate test results
      run: |
        if ! find allure-results -type f -name "*-result.json" | grep -q .; then
          echo "‚ùå No Allure results found. Skipping report generation."
          exit 0
        fi

    - name: Generate Allure report
      run: allure generate -c allure-results -o _site

    - name: Store report
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-report
        path: _site
        retention-days: 1
        if-no-files-found: error

  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Publish Docker Test Report
    env:
      TELEGRAM_BOT_CHAT_ID: ${{ secrets.TELEGRAM_BOT_CHAT_ID }}
      TELEGRAM_BOT_ACCESS_TOKEN: ${{ secrets.TELEGRAM_BOT_ACCESS_TOKEN }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Download site report
      uses: actions/download-artifact@v4
      with:
        name: docker-test-report
        path: _site

    - name: Validate report exists
      run: |
        if [ ! -s "_site/index.html" ]; then
          echo "‚ùå Report index.html not found. Cancelling publish."
          exit 1
        fi

    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Show report URL
      run: |
        echo 'üê≥ Docker Test Report: https://flower1power.github.io/API_TS_PW/'
